/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple albums.
         * @description Retrieves multiple albums by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: artists, coverArt, genres, items, owners, providers, similarAlbums
                     * @example artists
                     */
                    include?: string[];
                    /**
                     * @description User id
                     * @example 123456
                     */
                    "filter[owners.id]"?: string[];
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    "filter[id]"?: string[];
                    /**
                     * @description Barcode Id
                     * @example 196589525444
                     */
                    "filter[barcodeId]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Create single album.
         * @description Creates a new album.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["AlbumCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single album.
         * @description Retrieves single album by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: artists, coverArt, genres, items, owners, providers, similarAlbums
                     * @example artists
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete single album.
         * @description Deletes existing album.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update single album.
         * @description Updates existing album.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["AlbumUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/albums/{id}/relationships/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artists relationship ("to-many").
         * @description Retrieves artists relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: artists
                     * @example artists
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}/relationships/coverArt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get coverArt relationship ("to-many").
         * @description Retrieves coverArt relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: coverArt
                     * @example coverArt
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update coverArt relationship ("to-many").
         * @description Updates coverArt relationship.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["AlbumCoverArtRelationshipUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/albums/{id}/relationships/genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get genres relationship ("to-many").
         * @description Retrieves genres relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: genres
                     * @example genres
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}/relationships/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items relationship ("to-many").
         * @description Retrieves items relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: items
                     * @example items
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Items_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}/relationships/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get providers relationship ("to-many").
         * @description Retrieves providers relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: providers
                     * @example providers
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}/relationships/similarAlbums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similarAlbums relationship ("to-many").
         * @description Retrieves similarAlbums relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: similarAlbums
                     * @example similarAlbums
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Album id
                     * @example 251380836
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Albums_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artistBiographies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple artistBiographies.
         * @description Retrieves multiple artistBiographies by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistBiographies_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artistBiographies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single artistBiographie.
         * @description Retrieves single artistBiographie by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistBiographies_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update single artistBiographie.
         * @description Updates existing artistBiographie.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["ArtistBiographyUpdateBody"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/artistBiographies/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistBiographies_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artistClaims": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create single artistClaim.
         * @description Creates a new artistClaim.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["ArtistClaimsCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistClaims_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artistClaims/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single artistClaim.
         * @description Retrieves single artistClaim by id.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: acceptedArtists, owners, recommendedArtists
                     * @example acceptedArtists
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist claim id
                     * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistClaims_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update single artistClaim.
         * @description Updates existing artistClaim.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Artist claim id
                     * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["ArtistClaimsUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/artistClaims/{id}/relationships/acceptedArtists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get acceptedArtists relationship ("to-many").
         * @description Retrieves acceptedArtists relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: acceptedArtists
                     * @example acceptedArtists
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Artist claim id
                     * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistClaims_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update acceptedArtists relationship ("to-many").
         * @description Updates acceptedArtists relationship.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Artist claim id
                     * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["ArtistClaimAcceptedArtistsRelationshipUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/artistClaims/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Artist claim id
                     * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistClaims_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artistClaims/{id}/relationships/recommendedArtists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recommendedArtists relationship ("to-many").
         * @description Retrieves recommendedArtists relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: recommendedArtists
                     * @example recommendedArtists
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Artist claim id
                     * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistClaims_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artistRoles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple artistRoles.
         * @description Retrieves multiple artistRoles by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows to filter the collection of resources based on id attribute value
                     * @example 1
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistRoles_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artistRoles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single artistRole.
         * @description Retrieves single artistRole by id.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Artist role id
                     * @example 1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["ArtistRoles_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple artists.
         * @description Retrieves multiple artists by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums, biography, owners, profileArt, radio, roles, similarArtists, trackProviders, tracks, videos
                     * @example albums
                     */
                    include?: string[];
                    /**
                     * @description Artist handle
                     * @example jayz
                     */
                    "filter[handle]"?: string[];
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Create single artist.
         * @description Creates a new artist.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["ArtistCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single artist.
         * @description Retrieves single artist by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums, biography, owners, profileArt, radio, roles, similarArtists, trackProviders, tracks, videos
                     * @example albums
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update single artist.
         * @description Updates existing artist.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["ArtistUpdateBody"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/artists/{id}/relationships/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums relationship ("to-many").
         * @description Retrieves albums relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums
                     * @example albums
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}/relationships/biography": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get biography relationship ("to-one").
         * @description Retrieves biography relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: biography
                     * @example biography
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Single_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}/relationships/profileArt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get profileArt relationship ("to-many").
         * @description Retrieves profileArt relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: profileArt
                     * @example profileArt
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update profileArt relationship ("to-many").
         * @description Updates profileArt relationship.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["ArtistProfileArtRelationshipUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/artists/{id}/relationships/radio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get radio relationship ("to-many").
         * @description Retrieves radio relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: radio
                     * @example radio
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}/relationships/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get roles relationship ("to-many").
         * @description Retrieves roles relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: roles
                     * @example roles
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}/relationships/similarArtists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similarArtists relationship ("to-many").
         * @description Retrieves similarArtists relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: similarArtists
                     * @example similarArtists
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}/relationships/trackProviders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trackProviders relationship ("to-many").
         * @description Retrieves trackProviders relationship.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: trackProviders
                     * @example trackProviders
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_TrackProviders_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}/relationships/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracks relationship ("to-many").
         * @description Retrieves tracks relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Collapse by options for getting artist tracks. Available options: FINGERPRINT, ID. FINGERPRINT option might collapse similar tracks based entry fingerprints while collapsing by ID always returns all available items.
                     * @example FINGERPRINT
                     */
                    collapseBy: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: tracks
                     * @example tracks
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}/relationships/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get videos relationship ("to-many").
         * @description Retrieves videos relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: videos
                     * @example videos
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artist id
                     * @example 1566
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple artworks.
         * @description Retrieves multiple artworks by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /**
                     * @description Artwork id
                     * @example a468bee88def
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artworks_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Create single artwork.
         * @description Creates a new artwork.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["ArtworkCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artworks_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artworks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single artwork.
         * @description Retrieves single artwork by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Artwork id
                     * @example a468bee88def
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artworks_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artworks/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Artwork id
                     * @example a468bee88def
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Artworks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple genres.
         * @description Retrieves multiple genres by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows filtering by genre id(s). USER_SELECTABLE is special value used to return specific genres which users can select from
                     * @example '1,2,3' or 'USER_SELECTABLE'
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Genres_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/genres/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single genre.
         * @description Retrieves single genre by id.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Genre id
                     * @example 123
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Genres_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lyrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create single lyric.
         * @description Creates a new lyric.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["LyricsCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Lyrics_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lyrics/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single lyric.
         * @description Retrieves single lyric by id.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners, track
                     * @example owners
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Lyrics Id
                     * @example nejMcAhh5N8S3EQ4LaqysVdI0cZZ
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Lyrics_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update single lyric.
         * @description Updates existing lyric.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Lyrics Id
                     * @example nejMcAhh5N8S3EQ4LaqysVdI0cZZ
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["LyricsUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/lyrics/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Lyrics Id
                     * @example nejMcAhh5N8S3EQ4LaqysVdI0cZZ
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Lyrics_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lyrics/{id}/relationships/track": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get track relationship ("to-one").
         * @description Retrieves track relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: track
                     * @example track
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Lyrics Id
                     * @example nejMcAhh5N8S3EQ4LaqysVdI0cZZ
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Lyrics_Single_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple playlists.
         * @description Retrieves multiple playlists by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: coverArt, items, owners
                     * @example coverArt
                     */
                    include?: string[];
                    /**
                     * @description User id
                     * @example 123456
                     */
                    "filter[owners.id]"?: string[];
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Playlists_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Create single playlist.
         * @description Creates a new playlist.
         */
        post: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["PlaylistCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Playlists_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single playlist.
         * @description Retrieves single playlist by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: coverArt, items, owners
                     * @example coverArt
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Playlists_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete single playlist.
         * @description Deletes existing playlist.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update single playlist.
         * @description Updates existing playlist.
         */
        patch: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["PlaylistUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/playlists/{id}/relationships/coverArt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get coverArt relationship ("to-many").
         * @description Retrieves coverArt relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: coverArt
                     * @example coverArt
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Playlists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update coverArt relationship ("to-many").
         * @description Updates coverArt relationship.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["PlaylistCoverArtRelationshipUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/playlists/{id}/relationships/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items relationship ("to-many").
         * @description Retrieves items relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: items
                     * @example items
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Playlists_Items_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Add to items relationship ("to-many").
         * @description Adds item(s) to items relationship.
         */
        post: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["PlaylistItemsRelationshipAddOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        /**
         * Delete from items relationship ("to-many").
         * @description Deletes item(s) from items relationship.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["PlaylistItemsRelationshipRemoveOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update items relationship ("to-many").
         * @description Updates items relationship.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["PlaylistItemsRelationshipReorderOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/playlists/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Playlist id
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Playlists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple providers.
         * @description Retrieves multiple providers by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows to filter the collection of resources based on id attribute value
                     * @example 771
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Providers_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single provider.
         * @description Retrieves single provider by id.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Provider id
                     * @example 771
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Providers_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchResults/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single searchResult.
         * @description Retrieves single searchResult by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums, artists, playlists, topHits, tracks, videos
                     * @example albums
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Search query
                     * @example moon
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchResults_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchResults/{id}/relationships/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums relationship ("to-many").
         * @description Retrieves albums relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums
                     * @example albums
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Search query
                     * @example moon
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchResults_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchResults/{id}/relationships/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artists relationship ("to-many").
         * @description Retrieves artists relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: artists
                     * @example artists
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Search query
                     * @example moon
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchResults_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchResults/{id}/relationships/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get playlists relationship ("to-many").
         * @description Retrieves playlists relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: playlists
                     * @example playlists
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Search query
                     * @example moon
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchResults_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchResults/{id}/relationships/topHits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get topHits relationship ("to-many").
         * @description Retrieves topHits relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: topHits
                     * @example topHits
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Search query
                     * @example moon
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchResults_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchResults/{id}/relationships/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracks relationship ("to-many").
         * @description Retrieves tracks relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: tracks
                     * @example tracks
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Search query
                     * @example moon
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchResults_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchResults/{id}/relationships/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get videos relationship ("to-many").
         * @description Retrieves videos relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: videos
                     * @example videos
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Search query
                     * @example moon
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchResults_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchSuggestions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single searchSuggestion.
         * @description Retrieves single searchSuggestion by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: directHits
                     * @example directHits
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchSuggestions_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/searchSuggestions/{id}/relationships/directHits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get directHits relationship ("to-many").
         * @description Retrieves directHits relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Explicit filter
                     * @example include, exclude
                     */
                    explicitFilter?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: directHits
                     * @example directHits
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["SearchSuggestions_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trackFiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single trackFile.
         * @description Retrieves single trackFile by id.
         */
        get: {
            parameters: {
                query: {
                    formats: string;
                    usage: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackFiles_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trackManifests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single trackManifest.
         * @description Retrieves single trackManifest by id.
         */
        get: {
            parameters: {
                query: {
                    manifestType: string;
                    formats: string;
                    uriScheme: string;
                    usage: string;
                    adaptive: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackManifests_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trackSourceFiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple trackSourceFiles.
         * @description Retrieves multiple trackSourceFiles by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /**
                     * @description Track source file id
                     * @example a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackSourceFiles_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Create single trackSourceFile.
         * @description Creates a new trackSourceFile.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["TrackSourceFileCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackSourceFiles_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trackSourceFiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single trackSourceFile.
         * @description Retrieves single trackSourceFile by id.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Track source file id
                     * @example a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackSourceFiles_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trackSourceFiles/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Track source file id
                     * @example a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackSourceFiles_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trackStatistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple trackStatistics.
         * @description Retrieves multiple trackStatistics by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackStatistics_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trackStatistics/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single trackStatistic.
         * @description Retrieves single trackStatistic by id.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackStatistics_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trackStatistics/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["TrackStatistics_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple tracks.
         * @description Retrieves multiple tracks by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums, artists, genres, lyrics, owners, providers, radio, similarTracks, sourceFile, trackStatistics
                     * @example albums
                     */
                    include?: string[];
                    /**
                     * @description User id
                     * @example 123456
                     */
                    "filter[owners.id]"?: string[];
                    /**
                     * @description International Standard Recording Code (ISRC)
                     * @example QMJMT1701237
                     */
                    "filter[isrc]"?: string[];
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Create single track.
         * @description Creates a new track.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["TrackCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single track.
         * @description Retrieves single track by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums, artists, genres, lyrics, owners, providers, radio, similarTracks, sourceFile, trackStatistics
                     * @example albums
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete single track.
         * @description Deletes existing track.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update single track.
         * @description Updates existing track.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["TrackUpdateOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        trace?: never;
    };
    "/tracks/{id}/relationships/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums relationship ("to-many").
         * @description Retrieves albums relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums
                     * @example albums
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artists relationship ("to-many").
         * @description Retrieves artists relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: artists
                     * @example artists
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get genres relationship ("to-many").
         * @description Retrieves genres relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: genres
                     * @example genres
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/lyrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lyrics relationship ("to-many").
         * @description Retrieves lyrics relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: lyrics
                     * @example lyrics
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get providers relationship ("to-many").
         * @description Retrieves providers relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: providers
                     * @example providers
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/radio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get radio relationship ("to-many").
         * @description Retrieves radio relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: radio
                     * @example radio
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/similarTracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similarTracks relationship ("to-many").
         * @description Retrieves similarTracks relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: similarTracks
                     * @example similarTracks
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/sourceFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sourceFile relationship ("to-one").
         * @description Retrieves sourceFile relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: sourceFile
                     * @example sourceFile
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Single_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracks/{id}/relationships/trackStatistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trackStatistics relationship ("to-one").
         * @description Retrieves trackStatistics relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: trackStatistics
                     * @example trackStatistics
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description A Tidal catalogue ID
                     * @example 75413016
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Tracks_Single_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userCollections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single userCollection.
         * @description Retrieves single userCollection by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description BCP 47 locale
                     * @example en-US
                     */
                    locale: string;
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums, artists, owners, playlists, tracks, videos
                     * @example albums
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserCollections_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userCollections/{id}/relationships/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums relationship ("to-many").
         * @description Retrieves albums relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description BCP 47 locale
                     * @example en-US
                     */
                    locale: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums
                     * @example albums
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserCollections_Albums_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Add to albums relationship ("to-many").
         * @description Adds item(s) to albums relationship.
         */
        post: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionAlbumsRelationshipAddOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        /**
         * Delete from albums relationship ("to-many").
         * @description Deletes item(s) from albums relationship.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionAlbumsRelationshipRemoveOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userCollections/{id}/relationships/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artists relationship ("to-many").
         * @description Retrieves artists relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description BCP 47 locale
                     * @example en-US
                     */
                    locale: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: artists
                     * @example artists
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserCollections_Artists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Add to artists relationship ("to-many").
         * @description Adds item(s) to artists relationship.
         */
        post: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionArtistsRelationshipAddOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        /**
         * Delete from artists relationship ("to-many").
         * @description Deletes item(s) from artists relationship.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionArtistsRelationshipRemoveOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userCollections/{id}/relationships/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get owners relationship ("to-many").
         * @description Retrieves owners relationship.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: owners
                     * @example owners
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserCollections_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userCollections/{id}/relationships/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get playlists relationship ("to-many").
         * @description Retrieves playlists relationship.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: playlists
                     * @example playlists
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserCollections_Playlists_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Add to playlists relationship ("to-many").
         * @description Adds item(s) to playlists relationship.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionPlaylistsRelationshipRemoveOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        /**
         * Delete from playlists relationship ("to-many").
         * @description Deletes item(s) from playlists relationship.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionPlaylistsRelationshipRemoveOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userCollections/{id}/relationships/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracks relationship ("to-many").
         * @description Retrieves tracks relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description BCP 47 locale
                     * @example en-US
                     */
                    locale: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: tracks
                     * @example tracks
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserCollections_Tracks_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Add to tracks relationship ("to-many").
         * @description Adds item(s) to tracks relationship.
         */
        post: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionTracksRelationshipAddOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        /**
         * Delete from tracks relationship ("to-many").
         * @description Deletes item(s) from tracks relationship.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionTracksRelationshipRemoveOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userCollections/{id}/relationships/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get videos relationship ("to-many").
         * @description Retrieves videos relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description BCP 47 locale
                     * @example en-US
                     */
                    locale: string;
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: videos
                     * @example videos
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserCollections_Videos_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        /**
         * Add to videos relationship ("to-many").
         * @description Adds item(s) to videos relationship.
         */
        post: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionVideosRelationshipAddOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        /**
         * Delete from videos relationship ("to-many").
         * @description Deletes item(s) from videos relationship.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserCollectionVideosRelationshipRemoveOperation_Payload"];
                };
            };
            responses: {
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userEntitlements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single userEntitlement.
         * @description Retrieves single userEntitlement by id.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserEntitlements_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userRecommendations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single userRecommendation.
         * @description Retrieves single userRecommendation by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description BCP47 locale code
                     * @example en-US
                     */
                    locale: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: discoveryMixes, myMixes, newArrivalMixes
                     * @example discoveryMixes
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserRecommendations_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userRecommendations/{id}/relationships/discoveryMixes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get discoveryMixes relationship ("to-many").
         * @description Retrieves discoveryMixes relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description BCP47 locale code
                     * @example en-US
                     */
                    locale: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: discoveryMixes
                     * @example discoveryMixes
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserRecommendations_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userRecommendations/{id}/relationships/myMixes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get myMixes relationship ("to-many").
         * @description Retrieves myMixes relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description BCP47 locale code
                     * @example en-US
                     */
                    locale: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: myMixes
                     * @example myMixes
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserRecommendations_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userRecommendations/{id}/relationships/newArrivalMixes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get newArrivalMixes relationship ("to-many").
         * @description Retrieves newArrivalMixes relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description BCP47 locale code
                     * @example en-US
                     */
                    locale: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: newArrivalMixes
                     * @example newArrivalMixes
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description User id
                     * @example 123456
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserRecommendations_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userReports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create single userReport.
         * @description Creates a new userReport.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/vnd.api+json": components["schemas"]["UserReportCreateOperation_Payload"];
                };
            };
            responses: {
                /** @description Successful response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["UserReports_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user's user(s).
         * @description Retrieves current user's user(s).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Users_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple videos.
         * @description Retrieves multiple videos by available filters, or without if applicable.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums, artists, providers, thumbnailArt
                     * @example albums
                     */
                    include?: string[];
                    /**
                     * @description Allows to filter the collection of resources based on isrc attribute value
                     * @example USSM21600755
                     */
                    "filter[isrc]"?: string[];
                    /**
                     * @description Allows to filter the collection of resources based on id attribute value
                     * @example 75623239
                     */
                    "filter[id]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Videos_Multi_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single video.
         * @description Retrieves single video by id.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums, artists, providers, thumbnailArt
                     * @example albums
                     */
                    include?: string[];
                };
                header?: never;
                path: {
                    /**
                     * @description Video id
                     * @example 75623239
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Videos_Single_Resource_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/{id}/relationships/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums relationship ("to-many").
         * @description Retrieves albums relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: albums
                     * @example albums
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Video id
                     * @example 75623239
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Videos_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/{id}/relationships/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artists relationship ("to-many").
         * @description Retrieves artists relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: artists
                     * @example artists
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Video id
                     * @example 75623239
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Videos_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/{id}/relationships/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get providers relationship ("to-many").
         * @description Retrieves providers relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: providers
                     * @example providers
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Video id
                     * @example 75623239
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Videos_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/{id}/relationships/thumbnailArt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get thumbnailArt relationship ("to-many").
         * @description Retrieves thumbnailArt relationship.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description ISO 3166-1 alpha-2 country code
                     * @example US
                     */
                    countryCode: string;
                    /**
                     * @description Allows the client to customize which related resources should be returned. Available options: thumbnailArt
                     * @example thumbnailArt
                     */
                    include?: string[];
                    /** @description Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified */
                    "page[cursor]"?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Video id
                     * @example 75623239
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": components["schemas"]["Videos_Multi_Relationship_Data_Document"];
                    };
                };
                400: components["responses"]["Bad_Request_Response"];
                404: components["responses"]["Not_Found_Response"];
                405: components["responses"]["Method_Not_Allowed_Response"];
                406: components["responses"]["Not_Acceptable_Response"];
                415: components["responses"]["Unsupported_Media_Type_Response"];
                429: components["responses"]["Too_Many_Requests_Response"];
                500: components["responses"]["Internal_Server_Error_Response"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AlbumCoverArtRelationshipUpdateOperation_Payload: {
            data: components["schemas"]["AlbumCoverArtRelationshipUpdateOperation_Payload_Data"][];
        };
        AlbumCoverArtRelationshipUpdateOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "artworks";
        };
        AlbumCreateOperation_Payload: {
            data: components["schemas"]["AlbumCreateOperation_Payload_Data"];
        };
        AlbumCreateOperation_Payload_Data: {
            attributes: components["schemas"]["AlbumCreateOperation_Payload_Data_Attributes"];
            relationships: components["schemas"]["AlbumCreateOperation_Payload_Data_Relationships"];
            /** @enum {string} */
            type: "albums";
        };
        AlbumCreateOperation_Payload_Data_Attributes: {
            copyright?: components["schemas"]["AlbumCreateOperation_Payload_Data_Attributes_Copyright"];
            explicitLyrics?: boolean;
            /** Format: date */
            releaseDate?: string;
            title: string;
            upc?: string;
            version?: string;
        };
        AlbumCreateOperation_Payload_Data_Attributes_Copyright: {
            text: string;
            /** Format: int32 */
            year?: number;
        };
        AlbumCreateOperation_Payload_Data_Relationships: {
            artists: components["schemas"]["AlbumCreateOperation_Payload_Data_Relationships_Artists"];
            genres?: components["schemas"]["AlbumCreateOperation_Payload_Data_Relationships_Genres"];
        };
        AlbumCreateOperation_Payload_Data_Relationships_Artists: {
            data: components["schemas"]["AlbumCreateOperation_Payload_Data_Relationships_Artists_Data"][];
        };
        AlbumCreateOperation_Payload_Data_Relationships_Artists_Data: {
            id: string;
            /** @enum {string} */
            type: "artists";
        };
        AlbumCreateOperation_Payload_Data_Relationships_Genres: {
            data: components["schemas"]["AlbumCreateOperation_Payload_Data_Relationships_Genres_Data"][];
        };
        AlbumCreateOperation_Payload_Data_Relationships_Genres_Data: {
            id: string;
            /** @enum {string} */
            type: "genres";
        };
        AlbumUpdateOperation_Payload: {
            data: components["schemas"]["AlbumUpdateOperation_Payload_Data"];
        };
        AlbumUpdateOperation_Payload_Data: {
            attributes: components["schemas"]["AlbumUpdateOperation_Payload_Data_Attributes"];
            id: string;
            relationships?: components["schemas"]["AlbumUpdateOperation_Payload_Data_Relationships"];
            /** @enum {string} */
            type: "albums";
        };
        AlbumUpdateOperation_Payload_Data_Attributes: {
            copyright?: components["schemas"]["AlbumUpdateOperation_Payload_Data_Attributes_Copyright"];
            explicitLyrics?: boolean;
            /** Format: date */
            releaseDate?: string;
            title: string;
            version?: string;
        };
        AlbumUpdateOperation_Payload_Data_Attributes_Copyright: {
            text: string;
            /** Format: int32 */
            year?: number;
        };
        AlbumUpdateOperation_Payload_Data_Relationships: {
            genres?: components["schemas"]["AlbumUpdateOperation_Payload_Data_Relationships_Genres"];
        };
        AlbumUpdateOperation_Payload_Data_Relationships_Genres: {
            data: components["schemas"]["AlbumUpdateOperation_Payload_Data_Relationships_Genres_Data"][];
        };
        AlbumUpdateOperation_Payload_Data_Relationships_Genres_Data: {
            id: string;
            /** @enum {string} */
            type: "genres";
        };
        Albums_Attributes: {
            /** @description Available usage for this album */
            availability?: ("STREAM" | "DJ" | "STEM")[];
            /**
             * @description Barcode id (EAN-13 or UPC-A)
             * @example 00854242007552
             */
            barcodeId: string;
            /**
             * @description Copyright
             * @example (p)(c) 2017 S. CARTER ENTERPRISES, LLC. MARKETED BY ROC NATION & DISTRIBUTED BY ROC NATION/UMG RECORDINGS INC.
             */
            copyright?: string;
            /**
             * @description Duration (ISO 8601)
             * @example PT46M17S
             */
            duration: string;
            /**
             * @description Explicit content
             * @example true
             */
            explicit: boolean;
            /** @description Album links external to TIDAL API */
            externalLinks?: components["schemas"]["External_Link"][];
            mediaTags: string[];
            /**
             * Format: int32
             * @description Number of items in album
             * @example 13
             */
            numberOfItems: number;
            /**
             * Format: int32
             * @description Number of volumes
             * @example 1
             */
            numberOfVolumes: number;
            /**
             * Format: double
             * @description Popularity (0.0 - 1.0)
             * @example 0.56
             */
            popularity: number;
            /**
             * Format: date
             * @description Release date (ISO-8601)
             * @example 2017-06-30
             */
            releaseDate?: string;
            /**
             * @description Album title
             * @example 4:44
             */
            title: string;
            /**
             * @description Album type
             * @enum {string}
             */
            type: "ALBUM" | "EP" | "SINGLE";
        };
        Albums_Items_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Albums_Items_Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        Albums_Items_Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            meta?: components["schemas"]["Albums_Items_Resource_Identifier_Meta"];
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        Albums_Items_Resource_Identifier_Meta: {
            /**
             * Format: int32
             * @description track number
             * @example 4
             */
            trackNumber: number;
            /**
             * Format: int32
             * @description volume number
             * @example 1
             */
            volumeNumber: number;
        };
        Albums_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Albums_Multi_Resource_Data_Document: {
            data: components["schemas"]["Albums_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Albums_Relationships: {
            artists: components["schemas"]["Multi_Relationship_Data_Document"];
            coverArt: components["schemas"]["Multi_Relationship_Data_Document"];
            genres: components["schemas"]["Multi_Relationship_Data_Document"];
            items: components["schemas"]["Albums_Items_Multi_Relationship_Data_Document"];
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
            providers: components["schemas"]["Multi_Relationship_Data_Document"];
            similarAlbums: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        Albums_Resource_Object: {
            attributes?: components["schemas"]["Albums_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["Albums_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "albums";
        };
        Albums_Single_Resource_Data_Document: {
            data: components["schemas"]["Albums_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistBiographies_Attributes: {
            /**
             * @description Boolean to indicate if the biography is editable (source = tidal or artist)
             * @example true
             */
            editable: boolean;
            /**
             * @description Artist biography
             * @example Once upon a time an artist is born
             */
            text: string;
        };
        ArtistBiographies_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistBiographies_Multi_Resource_Data_Document: {
            data: components["schemas"]["ArtistBiographies_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistBiographies_Relationships: {
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        ArtistBiographies_Resource_Object: {
            attributes?: components["schemas"]["ArtistBiographies_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["ArtistBiographies_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "artistBiographies";
        };
        ArtistBiographies_Single_Resource_Data_Document: {
            data: components["schemas"]["ArtistBiographies_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistBiographyUpdateBody: {
            data: components["schemas"]["ArtistBiographyUpdateBody_Data"];
        };
        ArtistBiographyUpdateBody_Data: {
            attributes: components["schemas"]["ArtistBiographyUpdateBody_Data_Attributes"];
            id: string;
            /** @enum {string} */
            type: "artistBiographies";
        };
        ArtistBiographyUpdateBody_Data_Attributes: {
            text?: string;
        };
        ArtistClaimAcceptedArtistsRelationshipUpdateOperation_Payload: {
            data: components["schemas"]["ArtistClaimAcceptedArtistsRelationshipUpdateOperation_Payload_Data"][];
        };
        ArtistClaimAcceptedArtistsRelationshipUpdateOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "artists";
        };
        /**
         * @description Artist claim id
         * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
         */
        ArtistClaimId: {
            value?: string;
        };
        ArtistClaimsCreateOperation_Payload: {
            data: components["schemas"]["ArtistClaimsCreateOperation_Payload_Data"];
        };
        ArtistClaimsCreateOperation_Payload_Data: {
            attributes: components["schemas"]["ArtistClaimsCreateOperation_Payload_Data_Attributes"];
            /** @enum {string} */
            type: "artistClaims";
        };
        ArtistClaimsCreateOperation_Payload_Data_Attributes: {
            /** @enum {string} */
            provider: "DISTROKID" | "CDBABY" | "TUNECORE";
        };
        ArtistClaimsUpdateOperation_Payload: {
            data?: components["schemas"]["ArtistClaimsUpdateOperation_Payload_Data"];
            meta: components["schemas"]["ArtistClaimsUpdateOperation_Payload_Meta"];
        };
        ArtistClaimsUpdateOperation_Payload_Data: {
            attributes?: components["schemas"]["ArtistClaimsUpdateOperation_Payload_Data_Attributes"];
            id?: components["schemas"]["ArtistClaimId"];
            /** @enum {string} */
            type: "artistClaims";
        };
        ArtistClaimsUpdateOperation_Payload_Data_Attributes: Record<string, never>;
        ArtistClaimsUpdateOperation_Payload_Meta: {
            authorizationCode: string;
        };
        ArtistClaims_Attributes: {
            /**
             * @description The DSP used for authentication
             * @enum {string}
             */
            provider: "DISTROKID" | "CDBABY" | "TUNECORE";
            /**
             * @description The recommended claim resolution
             * @enum {string}
             */
            recommendation?: "DSP_PROFILE_CLAIMED" | "CONTENT_MIGRATED_TO_UPLOADS" | "NO_CONTENT_MATCHED";
            /** @description The DSP redirect url used for authentication */
            redirectUrl?: string;
            /** @description List of UPCs retrieved from the DSP */
            retrievedUpcs?: components["schemas"]["BarcodeId"][];
            /**
             * @description Current status of this claim
             * @enum {string}
             */
            status?: "AWAITING_OAUTH" | "FETCHING_CONTENT" | "VERIFIED" | "NO_MATCHES" | "AUTHENTICATION_FAILED" | "PROCESSING" | "COMPLETED" | "FAILED" | "CANCELLED";
        };
        ArtistClaims_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistClaims_Multi_Resource_Data_Document: {
            data: components["schemas"]["ArtistClaims_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistClaims_Relationships: {
            acceptedArtists: components["schemas"]["Multi_Relationship_Data_Document"];
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
            recommendedArtists: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        ArtistClaims_Resource_Object: {
            attributes?: components["schemas"]["ArtistClaims_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["ArtistClaims_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "artistClaims";
        };
        ArtistClaims_Single_Resource_Data_Document: {
            data: components["schemas"]["ArtistClaims_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistCreateOperation_Meta: {
            dryRun?: boolean;
        };
        ArtistCreateOperation_Payload: {
            data: components["schemas"]["ArtistCreateOperation_Payload_Data"];
            meta?: components["schemas"]["ArtistCreateOperation_Meta"];
        };
        ArtistCreateOperation_Payload_Data: {
            attributes: components["schemas"]["ArtistCreateOperation_Payload_Data_Attributes"];
            /** @enum {string} */
            type: "artists";
        };
        ArtistCreateOperation_Payload_Data_Attributes: {
            handle?: string;
            name: string;
        };
        ArtistProfileArtRelationshipUpdateOperation_Payload: {
            data: components["schemas"]["ArtistProfileArtRelationshipUpdateOperation_Payload_Data"][];
        };
        ArtistProfileArtRelationshipUpdateOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "artworks";
        };
        ArtistRoles_Attributes: {
            name?: string;
        };
        ArtistRoles_Multi_Resource_Data_Document: {
            data: components["schemas"]["ArtistRoles_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistRoles_Resource_Object: {
            attributes?: components["schemas"]["ArtistRoles_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "artistRoles";
        };
        ArtistRoles_Single_Resource_Data_Document: {
            data: components["schemas"]["ArtistRoles_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        ArtistUpdateBody: {
            data: components["schemas"]["ArtistUpdateBody_Data"];
            meta?: components["schemas"]["ArtistUpdateBody_Meta"];
        };
        ArtistUpdateBody_Data: {
            attributes: components["schemas"]["ArtistUpdateBody_Data_Attributes"];
            id: string;
            /** @enum {string} */
            type: "artists";
        };
        ArtistUpdateBody_Data_Attributes: {
            contributionsEnabled?: boolean;
            contributionsSalesPitch?: string;
            externalLinks?: components["schemas"]["External_Link_Payload"][];
            handle?: string;
            name?: string;
        };
        ArtistUpdateBody_Meta: {
            dryRun?: boolean;
        };
        Artists_Attributes: {
            /**
             * @description Is the artist enabled for contributions?
             * @example true
             */
            contributionsEnabled?: boolean;
            /**
             * @description Contributions sales pitch
             * @example Help me be a full time artist
             */
            contributionsSalesPitch?: string;
            /** @description Artist links external to TIDAL API */
            externalLinks?: components["schemas"]["External_Link"][];
            /**
             * @description Artist handle
             * @example jayz
             */
            handle?: string;
            /**
             * @description Artist name
             * @example JAY Z
             */
            name: string;
            /**
             * Format: double
             * @description Artist popularity (0.0 - 1.0)
             * @example 0.56
             */
            popularity: number;
            /**
             * @description Is the artist spotlighted?
             * @example true
             */
            spotlighted?: boolean;
        };
        Artists_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Artists_Multi_Resource_Data_Document: {
            data: components["schemas"]["Artists_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Artists_Relationships: {
            albums: components["schemas"]["Multi_Relationship_Data_Document"];
            biography: components["schemas"]["Single_Relationship_Data_Document"];
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
            profileArt: components["schemas"]["Multi_Relationship_Data_Document"];
            radio: components["schemas"]["Multi_Relationship_Data_Document"];
            roles: components["schemas"]["Multi_Relationship_Data_Document"];
            similarArtists: components["schemas"]["Multi_Relationship_Data_Document"];
            trackProviders: components["schemas"]["Artists_TrackProviders_Multi_Relationship_Data_Document"];
            tracks: components["schemas"]["Multi_Relationship_Data_Document"];
            videos: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        Artists_Resource_Object: {
            attributes?: components["schemas"]["Artists_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["Artists_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "artists";
        };
        Artists_Single_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Artists_Single_Resource_Data_Document: {
            data: components["schemas"]["Artists_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Artists_TrackProviders_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Artists_TrackProviders_Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        Artists_TrackProviders_Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            meta?: components["schemas"]["Artists_TrackProviders_Resource_Identifier_Meta"];
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        Artists_TrackProviders_Resource_Identifier_Meta: {
            /**
             * Format: int64
             * @description Total number of tracks released together with the provider
             * @example 14
             */
            numberOfTracks: number;
        };
        ArtworkCreateOperation_Payload: {
            data: components["schemas"]["ArtworkCreateOperation_Payload_Data"];
        };
        ArtworkCreateOperation_Payload_Data: {
            attributes: components["schemas"]["ArtworkCreateOperation_Payload_Data_Attributes"];
            /** @enum {string} */
            type: "artworks";
        };
        ArtworkCreateOperation_Payload_Data_Attributes: {
            /** @enum {string} */
            mediaType: "IMAGE" | "VIDEO";
            sourceFile: components["schemas"]["ArtworkCreateOperation_Payload_Data_Attributes_SourceFile"];
        };
        ArtworkCreateOperation_Payload_Data_Attributes_SourceFile: {
            md5Hash: string;
            /** Format: int64 */
            size: number;
        };
        /** @description Artwork files */
        Artwork_File: {
            /** @description Artwork file href */
            href: string;
            meta?: components["schemas"]["Artwork_File_Meta"];
        };
        /** @description Metadata about an artwork file */
        Artwork_File_Meta: {
            /**
             * Format: int32
             * @description Height (in pixels)
             * @example 80
             */
            height: number;
            /**
             * Format: int32
             * @description Width (in pixels)
             * @example 80
             */
            width: number;
        };
        /** @description Artwork source file */
        Artwork_SourceFile: {
            /** @description MD5 hash of file to be uploaded */
            md5Hash: string;
            /**
             * Format: int64
             * @description File size of the artwork in bytes
             */
            size: number;
            status: components["schemas"]["File_Status"];
            uploadLink: components["schemas"]["File_Upload_Link"];
        };
        Artworks_Attributes: {
            /** @description Artwork files */
            files: components["schemas"]["Artwork_File"][];
            /**
             * @description Media type of artwork files
             * @enum {string}
             */
            mediaType: "IMAGE" | "VIDEO";
            sourceFile?: components["schemas"]["Artwork_SourceFile"];
        };
        Artworks_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Artworks_Multi_Resource_Data_Document: {
            data: components["schemas"]["Artworks_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Artworks_Relationships: {
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        Artworks_Resource_Object: {
            attributes?: components["schemas"]["Artworks_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["Artworks_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "artworks";
        };
        Artworks_Single_Resource_Data_Document: {
            data: components["schemas"]["Artworks_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        AttachSourceFileToTrack: {
            id: string;
            /** @enum {string} */
            type: "tracks";
        };
        /** @description Track normalization data */
        AudioNormalizationData: {
            /** Format: float */
            peakAmplitude?: number;
            /** Format: float */
            replayGain?: number;
        };
        /**
         * @description Barcode Id
         * @example 196589525444
         */
        BarcodeId: {
            value: string;
        };
        /** @description DRM data. Absence implies no DRM. */
        DrmData: {
            certificateUrl?: string;
            /** @enum {string} */
            drmSystem?: "FAIRPLAY" | "WIDEVINE";
            licenseUrl?: string;
        };
        Error_Object: {
            /** @description application-specific error code */
            code?: string;
            /** @description human-readable explanation specific to this occurrence of the problem */
            detail?: string;
            /** @description unique identifier for this particular occurrence of the problem */
            id?: string;
            source?: components["schemas"]["Error_Object_Source"];
            /** @description HTTP status code applicable to this problem */
            status?: string;
        };
        Error_Object_Source: {
            /**
             * @description string indicating the name of a single request header which caused the error
             * @example X-some-custom-header
             */
            header?: string;
            /**
             * @description string indicating which URI query parameter caused the error.
             * @example countryCode
             */
            parameter?: string;
            /**
             * @description a JSON Pointer [RFC6901] to the value in the request document that caused the error
             * @example /data/attributes/title
             */
            pointer?: string;
        };
        Errors_Document: {
            /** @description Array of error objects */
            errors?: components["schemas"]["Error_Object"][];
            links?: components["schemas"]["Links"];
        };
        External_Link: {
            href: string;
            meta: components["schemas"]["External_Link_Meta"];
        };
        /** @description metadata about an external link */
        External_Link_Meta: {
            /** @enum {string} */
            type: "TIDAL_SHARING" | "TIDAL_AUTOPLAY_ANDROID" | "TIDAL_AUTOPLAY_IOS" | "TIDAL_AUTOPLAY_WEB" | "TWITTER" | "FACEBOOK" | "INSTAGRAM" | "TIKTOK" | "SNAPCHAT" | "OFFICIAL_HOMEPAGE" | "CASHAPP_CONTRIBUTIONS";
        };
        External_Link_Payload: {
            href?: string;
            meta: components["schemas"]["External_Link_Meta"];
        };
        /** @description File status */
        File_Status: {
            /**
             * @description Moderation status for file
             * @enum {string}
             */
            moderationFileStatus: "NOT_MODERATED" | "SCANNING" | "FLAGGED" | "TAKEN_DOWN" | "OK" | "ERROR";
            /**
             * @description Technical status for file
             * @enum {string}
             */
            technicalFileStatus: "UPLOAD_REQUESTED" | "PROCESSING" | "OK" | "ERROR";
        };
        /** @description Upload link */
        File_Upload_Link: {
            /** @description Href to upload actual file to */
            href: string;
            meta: components["schemas"]["File_Upload_Link_Meta"];
        };
        /** @description metadata for upload link */
        File_Upload_Link_Meta: {
            /** @description HTTP headers that must be added to the operation */
            headers?: {
                [key: string]: string;
            };
            /** @description HTTP method */
            method: string;
        };
        Genres_Attributes: {
            /**
             * @description Genre name
             * @example pop
             */
            genreName: string;
        };
        Genres_Multi_Resource_Data_Document: {
            data: components["schemas"]["Genres_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Genres_Resource_Object: {
            attributes?: components["schemas"]["Genres_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "genres";
        };
        Genres_Single_Resource_Data_Document: {
            data: components["schemas"]["Genres_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Included: (components["schemas"]["Albums_Resource_Object"] | components["schemas"]["ArtistBiographies_Resource_Object"] | components["schemas"]["ArtistClaims_Resource_Object"] | components["schemas"]["ArtistRoles_Resource_Object"] | components["schemas"]["Artists_Resource_Object"] | components["schemas"]["Artworks_Resource_Object"] | components["schemas"]["Genres_Resource_Object"] | components["schemas"]["Lyrics_Resource_Object"] | components["schemas"]["Playlists_Resource_Object"] | components["schemas"]["Providers_Resource_Object"] | components["schemas"]["SearchResults_Resource_Object"] | components["schemas"]["SearchSuggestions_Resource_Object"] | components["schemas"]["TrackFiles_Resource_Object"] | components["schemas"]["TrackManifests_Resource_Object"] | components["schemas"]["TrackSourceFiles_Resource_Object"] | components["schemas"]["TrackStatistics_Resource_Object"] | components["schemas"]["Tracks_Resource_Object"] | components["schemas"]["UserCollections_Resource_Object"] | components["schemas"]["UserEntitlements_Resource_Object"] | components["schemas"]["UserRecommendations_Resource_Object"] | components["schemas"]["UserReports_Resource_Object"] | components["schemas"]["Users_Resource_Object"] | components["schemas"]["Videos_Resource_Object"])[];
        Links: {
            meta?: components["schemas"]["Links_Meta"];
            /**
             * @description Link to next page
             * @example /artists/xyz/relationships/tracks?page[cursor]=zyx
             */
            next?: string;
            /**
             * @description Link to self
             * @example /artists/xyz/relationships/tracks
             */
            self: string;
        };
        /** @description Non-standard meta information for links */
        Links_Meta: {
            /**
             * @description Only cursor part of next link
             * @example zyx
             */
            nextCursor: string;
        };
        LyricsCreateOperation_Payload: {
            data: components["schemas"]["LyricsCreateOperation_Payload_Data"];
            meta?: components["schemas"]["LyricsCreateOperation_Payload_Meta"];
        };
        LyricsCreateOperation_Payload_Data: {
            attributes?: components["schemas"]["LyricsCreateOperation_Payload_Data_Attributes"];
            relationships: components["schemas"]["LyricsCreateOperation_Payload_Data_Relationships"];
            /** @enum {string} */
            type: "lyrics";
        };
        LyricsCreateOperation_Payload_Data_Attributes: {
            text?: string;
        };
        LyricsCreateOperation_Payload_Data_Relationships: {
            track: components["schemas"]["LyricsCreateOperation_Payload_Data_Relationships_Track"];
        };
        LyricsCreateOperation_Payload_Data_Relationships_Track: {
            id: string;
            /** @enum {string} */
            type: "tracks";
        };
        LyricsCreateOperation_Payload_Meta: {
            generate?: boolean;
        };
        LyricsUpdateOperation_Payload: {
            data: components["schemas"]["LyricsUpdateOperation_Payload_Data"];
        };
        LyricsUpdateOperation_Payload_Data: {
            attributes: components["schemas"]["LyricsUpdateOperation_Payload_Data_Attributes"];
            id: string;
            /** @enum {string} */
            type: "lyrics";
        };
        LyricsUpdateOperation_Payload_Data_Attributes: {
            text: string;
        };
        Lyrics_Attributes: {
            /** @enum {string} */
            technicalStatus: "PENDING" | "PROCESSING" | "ERROR" | "OK";
            text?: string;
        };
        Lyrics_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Lyrics_Multi_Resource_Data_Document: {
            data: components["schemas"]["Lyrics_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Lyrics_Relationships: {
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
            track: components["schemas"]["Single_Relationship_Data_Document"];
        };
        Lyrics_Resource_Object: {
            attributes?: components["schemas"]["Lyrics_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["Lyrics_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "lyrics";
        };
        Lyrics_Single_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Lyrics_Single_Resource_Data_Document: {
            data: components["schemas"]["Lyrics_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        PlaylistCoverArtRelationshipUpdateOperation_Payload: {
            data: components["schemas"]["PlaylistCoverArtRelationshipUpdateOperation_Payload_Data"][];
        };
        PlaylistCoverArtRelationshipUpdateOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "artworks";
        };
        PlaylistCreateOperation_Payload: {
            data: components["schemas"]["PlaylistCreateOperation_Payload_Data"];
        };
        PlaylistCreateOperation_Payload_Data: {
            attributes: components["schemas"]["PlaylistCreateOperation_Payload_Data_Attributes"];
            /** @enum {string} */
            type: "playlists";
        };
        PlaylistCreateOperation_Payload_Data_Attributes: {
            /**
             * @description Access type
             * @example PUBLIC
             * @enum {string}
             */
            accessType?: "PUBLIC" | "UNLISTED";
            description?: string;
            name: string;
        };
        PlaylistItemsRelationshipAddOperation_Payload: {
            data: components["schemas"]["PlaylistItemsRelationshipAddOperation_Payload_Data"][];
            meta?: components["schemas"]["PlaylistItemsRelationshipAddOperation_Payload_Meta"];
        };
        PlaylistItemsRelationshipAddOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "tracks" | "videos";
        };
        PlaylistItemsRelationshipAddOperation_Payload_Meta: {
            positionBefore: string;
        };
        PlaylistItemsRelationshipRemoveOperation_Payload: {
            data: components["schemas"]["PlaylistItemsRelationshipRemoveOperation_Payload_Data"][];
        };
        PlaylistItemsRelationshipRemoveOperation_Payload_Data: {
            id: string;
            meta: components["schemas"]["PlaylistItemsRelationshipRemoveOperation_Payload_Data_Meta"];
            /** @enum {string} */
            type: "tracks" | "videos";
        };
        PlaylistItemsRelationshipRemoveOperation_Payload_Data_Meta: {
            itemId: string;
        };
        PlaylistItemsRelationshipReorderOperation_Payload: {
            data: components["schemas"]["PlaylistItemsRelationshipReorderOperation_Payload_Data"][];
            meta?: components["schemas"]["PlaylistItemsRelationshipReorderOperation_Payload_Meta"];
        };
        PlaylistItemsRelationshipReorderOperation_Payload_Data: {
            id: string;
            meta: components["schemas"]["PlaylistItemsRelationshipReorderOperation_Payload_Data_Meta"];
            /** @enum {string} */
            type: "tracks" | "videos";
        };
        PlaylistItemsRelationshipReorderOperation_Payload_Data_Meta: {
            itemId: string;
        };
        PlaylistItemsRelationshipReorderOperation_Payload_Meta: {
            positionBefore: string;
        };
        PlaylistUpdateOperation_Payload: {
            data: components["schemas"]["PlaylistUpdateOperation_Payload_Data"];
        };
        PlaylistUpdateOperation_Payload_Data: {
            attributes: components["schemas"]["PlaylistUpdateOperation_Payload_Data_Attributes"];
            id: string;
            /** @enum {string} */
            type: "playlists";
        };
        PlaylistUpdateOperation_Payload_Data_Attributes: {
            /**
             * @description Access type
             * @example PUBLIC
             * @enum {string}
             */
            accessType?: "PUBLIC" | "UNLISTED";
            description?: string;
            name?: string;
        };
        Playlists_Attributes: {
            /**
             * @description Access type
             * @example PUBLIC
             * @enum {string}
             */
            accessType: "PUBLIC" | "UNLISTED";
            /** @description Indicates if the playlist has a duration and set number of tracks */
            bounded: boolean;
            /**
             * Format: date-time
             * @description Datetime of playlist creation (ISO 8601)
             */
            createdAt: string;
            /** @description Playlist description */
            description?: string;
            /**
             * @description Duration of playlist (ISO 8601)
             * @example P30M5S
             */
            duration?: string;
            externalLinks: components["schemas"]["External_Link"][];
            /**
             * Format: date-time
             * @description Datetime of last modification of the playlist (ISO 8601)
             */
            lastModifiedAt: string;
            /** @description Playlist name */
            name: string;
            /**
             * Format: int32
             * @description Number of items in the playlist
             */
            numberOfItems?: number;
            /**
             * @description The type of the playlist
             * @enum {string}
             */
            playlistType: "EDITORIAL" | "USER" | "MIX" | "ARTIST";
        };
        Playlists_Items_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Playlists_Items_Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        Playlists_Items_Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            meta?: components["schemas"]["Playlists_Items_Resource_Identifier_Meta"];
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        Playlists_Items_Resource_Identifier_Meta: {
            /** Format: date-time */
            addedAt?: string;
            itemId?: string;
        };
        Playlists_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Playlists_Multi_Resource_Data_Document: {
            data: components["schemas"]["Playlists_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Playlists_Relationships: {
            coverArt: components["schemas"]["Multi_Relationship_Data_Document"];
            items: components["schemas"]["Playlists_Items_Multi_Relationship_Data_Document"];
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        Playlists_Resource_Object: {
            attributes?: components["schemas"]["Playlists_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["Playlists_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "playlists";
        };
        Playlists_Single_Resource_Data_Document: {
            data: components["schemas"]["Playlists_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Providers_Attributes: {
            /**
             * @description Provider name
             * @example Columbia/Legacy
             */
            name: string;
        };
        Providers_Multi_Resource_Data_Document: {
            data: components["schemas"]["Providers_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Providers_Resource_Object: {
            attributes?: components["schemas"]["Providers_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "providers";
        };
        Providers_Single_Resource_Data_Document: {
            data: components["schemas"]["Providers_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        Resource_ObjectObjectObject: {
            attributes?: Record<string, never>;
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: Record<string, never>;
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        SearchResults_Attributes: {
            /**
             * @description 'did you mean' prompt
             * @example beatles
             */
            didYouMean?: string;
            /**
             * @description search request unique tracking number
             * @example 5896e37d-e847-4ca6-9629-ef8001719f7f
             */
            trackingId: string;
        };
        SearchResults_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        SearchResults_Multi_Resource_Data_Document: {
            data: components["schemas"]["SearchResults_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        SearchResults_Relationships: {
            albums: components["schemas"]["Multi_Relationship_Data_Document"];
            artists: components["schemas"]["Multi_Relationship_Data_Document"];
            playlists: components["schemas"]["Multi_Relationship_Data_Document"];
            topHits: components["schemas"]["Multi_Relationship_Data_Document"];
            tracks: components["schemas"]["Multi_Relationship_Data_Document"];
            videos: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        SearchResults_Resource_Object: {
            attributes?: components["schemas"]["SearchResults_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["SearchResults_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "searchResults";
        };
        SearchResults_Single_Resource_Data_Document: {
            data: components["schemas"]["SearchResults_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        SearchSuggestions_Attributes: {
            /** @description Suggestions from search history */
            history?: components["schemas"]["SearchSuggestions_History"][];
            /** @description Suggested search queries */
            suggestions?: components["schemas"]["SearchSuggestions_Suggestions"][];
            /** @description Unique tracking id */
            trackingId: string;
        };
        SearchSuggestions_Highlights: {
            /** Format: int32 */
            length: number;
            /** Format: int32 */
            start: number;
        };
        /** @description Suggestions from search history */
        SearchSuggestions_History: {
            highlights?: components["schemas"]["SearchSuggestions_Highlights"][];
            query: string;
        };
        SearchSuggestions_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        SearchSuggestions_Multi_Resource_Data_Document: {
            data: components["schemas"]["SearchSuggestions_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        SearchSuggestions_Relationships: {
            directHits: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        SearchSuggestions_Resource_Object: {
            attributes?: components["schemas"]["SearchSuggestions_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["SearchSuggestions_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "searchSuggestions";
        };
        SearchSuggestions_Single_Resource_Data_Document: {
            data: components["schemas"]["SearchSuggestions_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        /** @description Suggested search queries */
        SearchSuggestions_Suggestions: {
            highlights?: components["schemas"]["SearchSuggestions_Highlights"][];
            query: string;
        };
        Single_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"];
            links: components["schemas"]["Links"];
        };
        TrackCreateOperation_Payload: {
            data: components["schemas"]["TrackCreateOperation_Payload_Data"];
        };
        TrackCreateOperation_Payload_Data: {
            attributes: components["schemas"]["TrackCreateOperation_Payload_Data_Attributes"];
            relationships: components["schemas"]["TrackCreateOperation_Payload_Data_Relationships"];
            /** @enum {string} */
            type: "tracks";
        };
        TrackCreateOperation_Payload_Data_Attributes: {
            /**
             * @description Access type
             * @example PRIVATE
             * @enum {string}
             */
            accessType: "PUBLIC" | "UNLISTED" | "PRIVATE";
            /**
             * @description Explicit content
             * @example false
             */
            explicit?: boolean;
            title: string;
        };
        TrackCreateOperation_Payload_Data_Relationships: {
            albums: components["schemas"]["TrackCreateOperation_Payload_Data_Relationships_Albums"];
            artists: components["schemas"]["TrackCreateOperation_Payload_Data_Relationships_Artists"];
            genres?: components["schemas"]["TrackCreateOperation_Payload_Data_Relationships_Genres"];
        };
        TrackCreateOperation_Payload_Data_Relationships_Albums: {
            data: components["schemas"]["TrackCreateOperation_Payload_Data_Relationships_Albums_Data"][];
        };
        TrackCreateOperation_Payload_Data_Relationships_Albums_Data: {
            id: string;
            /** @enum {string} */
            type: "albums";
        };
        TrackCreateOperation_Payload_Data_Relationships_Artists: {
            data: components["schemas"]["TrackCreateOperation_Payload_Data_Relationships_Artists_Data"][];
        };
        TrackCreateOperation_Payload_Data_Relationships_Artists_Data: {
            id: string;
            /** @enum {string} */
            type: "artists";
        };
        TrackCreateOperation_Payload_Data_Relationships_Genres: {
            data: components["schemas"]["TrackCreateOperation_Payload_Data_Relationships_Genres_Data"][];
        };
        TrackCreateOperation_Payload_Data_Relationships_Genres_Data: {
            id: string;
            /** @enum {string} */
            type: "genres";
        };
        TrackFiles_Attributes: {
            albumAudioNormalizationData?: components["schemas"]["AudioNormalizationData"];
            /**
             * @description File's audio format
             * @enum {string}
             */
            format?: "HEAACV1" | "AACLC" | "FLAC" | "FLAC_HIRES";
            trackAudioNormalizationData?: components["schemas"]["AudioNormalizationData"];
            /**
             * @description Track presentation
             * @enum {string}
             */
            trackPresentation?: "FULL" | "PREVIEW";
            /** @description File URL */
            url?: string;
        };
        TrackFiles_Multi_Resource_Data_Document: {
            data: components["schemas"]["TrackFiles_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackFiles_Resource_Object: {
            attributes?: components["schemas"]["TrackFiles_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "trackFiles";
        };
        TrackFiles_Single_Resource_Data_Document: {
            data: components["schemas"]["TrackFiles_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackManifests_Attributes: {
            albumAudioNormalizationData?: components["schemas"]["AudioNormalizationData"];
            drmData?: components["schemas"]["DrmData"];
            /** @description Formats present in manifest */
            formats?: ("HEAACV1" | "AACLC" | "FLAC" | "FLAC_HIRES")[];
            /** @description Unique manifest hash */
            hash?: string;
            trackAudioNormalizationData?: components["schemas"]["AudioNormalizationData"];
            /**
             * @description Track presentation
             * @enum {string}
             */
            trackPresentation?: "FULL" | "PREVIEW";
            /** @description Manifest URI */
            uri?: string;
        };
        TrackManifests_Multi_Resource_Data_Document: {
            data: components["schemas"]["TrackManifests_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackManifests_Resource_Object: {
            attributes?: components["schemas"]["TrackManifests_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "trackManifests";
        };
        TrackManifests_Single_Resource_Data_Document: {
            data: components["schemas"]["TrackManifests_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackSourceFileCreateOperation_Payload: {
            data: components["schemas"]["TrackSourceFileCreateOperation_Payload_Data"];
        };
        TrackSourceFileCreateOperation_Payload_Data: {
            attributes: components["schemas"]["TrackSourceFileCreateOperation_Payload_Data_Attributes"];
            relationships: components["schemas"]["TrackSourceFileCreateOperation_Payload_Data_Relationships"];
            /** @enum {string} */
            type: "trackSourceFiles";
        };
        TrackSourceFileCreateOperation_Payload_Data_Attributes: {
            md5Hash: string;
            /** Format: int64 */
            size: number;
        };
        TrackSourceFileCreateOperation_Payload_Data_Relationships: {
            track: components["schemas"]["AttachSourceFileToTrack"];
        };
        TrackSourceFiles_Attributes: {
            /** @description MD5 hash of file to be uploaded */
            md5Hash: string;
            /**
             * Format: int64
             * @description File size of the track in bytes
             */
            size: number;
            status: components["schemas"]["File_Status"];
            uploadLink: components["schemas"]["File_Upload_Link"];
        };
        TrackSourceFiles_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackSourceFiles_Multi_Resource_Data_Document: {
            data: components["schemas"]["TrackSourceFiles_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackSourceFiles_Relationships: {
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        TrackSourceFiles_Resource_Object: {
            attributes?: components["schemas"]["TrackSourceFiles_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["TrackSourceFiles_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "trackSourceFiles";
        };
        TrackSourceFiles_Single_Resource_Data_Document: {
            data: components["schemas"]["TrackSourceFiles_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackStatistics_Attributes: {
            /**
             * Format: int32
             * @description Total playbacks
             */
            totalPlaybacks: number;
            /**
             * Format: int32
             * @description Unique listeners
             */
            uniqueListeners: number;
        };
        TrackStatistics_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackStatistics_Multi_Resource_Data_Document: {
            data: components["schemas"]["TrackStatistics_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackStatistics_Relationships: {
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        TrackStatistics_Resource_Object: {
            attributes?: components["schemas"]["TrackStatistics_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["TrackStatistics_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "trackStatistics";
        };
        TrackStatistics_Single_Resource_Data_Document: {
            data: components["schemas"]["TrackStatistics_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        TrackUpdateOperation_Payload: {
            data: components["schemas"]["TrackUpdateOperation_Payload_Data"];
        };
        TrackUpdateOperation_Payload_Data: {
            attributes: components["schemas"]["TrackUpdateOperation_Payload_Data_Attributes"];
            id: string;
            relationships?: components["schemas"]["TrackUpdateOperation_Payload_Data_Relationships"];
            /** @enum {string} */
            type: "tracks";
        };
        TrackUpdateOperation_Payload_Data_Attributes: {
            /**
             * @description Access type
             * @example PRIVATE
             * @enum {string}
             */
            accessType?: "PUBLIC" | "UNLISTED" | "PRIVATE";
            /** Format: float */
            bpm?: number;
            /**
             * @description Explicit content
             * @example false
             */
            explicit?: boolean;
            /** @enum {string} */
            key?: "UNKNOWN" | "C" | "CSharp" | "D" | "Eb" | "E" | "F" | "FSharp" | "G" | "Ab" | "A" | "Bb" | "B";
            /** @enum {string} */
            keyScale?: "UNKNOWN" | "MAJOR" | "MINOR" | "AEOLIAN" | "BLUES" | "DORIAN" | "HARMONIC_MINOR" | "LOCRIAN" | "LYDIAN" | "MIXOLYDIAN" | "PENTATONIC_MAJOR" | "PHRYGIAN" | "MELODIC_MINOR" | "PENTATONIC_MINOR";
            title?: string;
            toneTags?: string[];
        };
        TrackUpdateOperation_Payload_Data_Relationships: {
            genres?: components["schemas"]["TrackUpdateOperation_Payload_Data_Relationships_Genres"];
        };
        TrackUpdateOperation_Payload_Data_Relationships_Genres: {
            data: components["schemas"]["TrackUpdateOperation_Payload_Data_Relationships_Genres_Data"][];
        };
        TrackUpdateOperation_Payload_Data_Relationships_Genres_Data: {
            id: string;
            /** @enum {string} */
            type: "genres";
        };
        Tracks_Attributes: {
            /**
             * @description Access type
             * @example PRIVATE
             * @enum {string}
             */
            accessType?: "PUBLIC" | "UNLISTED" | "PRIVATE";
            /** @description Available usage for this track */
            availability?: ("STREAM" | "DJ" | "STEM")[];
            /**
             * Format: float
             * @description Beats per minute
             * @example 60
             */
            bpm?: number;
            /**
             * @description Copyright
             * @example (p)(c) 2017 S. CARTER ENTERPRISES, LLC. MARKETED BY ROC NATION & DISTRIBUTED BY ROC NATION/UMG RECORDINGS INC.
             */
            copyright?: string;
            /**
             * Format: date-time
             * @description Datetime of track creation (ISO 8601)
             */
            createdAt?: string;
            /**
             * @description Duration (ISO 8601)
             * @example PT2M58S
             */
            duration: string;
            /**
             * @description Explicit content
             * @example false
             */
            explicit: boolean;
            /** @description Track links external to TIDAL API */
            externalLinks?: components["schemas"]["External_Link"][];
            /**
             * @description International Standard Recording Code (ISRC)
             * @example QMJMT1701229
             */
            isrc: string;
            /**
             * @description Key
             * @enum {string}
             */
            key: "UNKNOWN" | "C" | "CSharp" | "D" | "Eb" | "E" | "F" | "FSharp" | "G" | "Ab" | "A" | "Bb" | "B";
            /**
             * @description The scale of the key
             * @enum {string}
             */
            keyScale: "UNKNOWN" | "MAJOR" | "MINOR" | "AEOLIAN" | "BLUES" | "DORIAN" | "HARMONIC_MINOR" | "LOCRIAN" | "LYDIAN" | "MIXOLYDIAN" | "PENTATONIC_MAJOR" | "PHRYGIAN" | "MELODIC_MINOR" | "PENTATONIC_MINOR";
            mediaTags: string[];
            /**
             * Format: double
             * @description Popularity (0.0 - 1.0)
             * @example 0.56
             */
            popularity: number;
            /**
             * @description Is the track spotlighted?
             * @example true
             */
            spotlighted?: boolean;
            /**
             * @description Track title
             * @example Kill Jay Z
             */
            title: string;
            toneTags?: string[];
            /**
             * @description Track version, complements title
             * @example original, mix etc
             */
            version?: string;
        };
        Tracks_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Tracks_Multi_Resource_Data_Document: {
            data: components["schemas"]["Tracks_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Tracks_Relationships: {
            albums: components["schemas"]["Multi_Relationship_Data_Document"];
            artists: components["schemas"]["Multi_Relationship_Data_Document"];
            genres: components["schemas"]["Multi_Relationship_Data_Document"];
            lyrics: components["schemas"]["Multi_Relationship_Data_Document"];
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
            providers: components["schemas"]["Multi_Relationship_Data_Document"];
            radio: components["schemas"]["Multi_Relationship_Data_Document"];
            similarTracks: components["schemas"]["Multi_Relationship_Data_Document"];
            sourceFile: components["schemas"]["Single_Relationship_Data_Document"];
            trackStatistics: components["schemas"]["Single_Relationship_Data_Document"];
        };
        Tracks_Resource_Object: {
            attributes?: components["schemas"]["Tracks_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["Tracks_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "tracks";
        };
        Tracks_Single_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Tracks_Single_Resource_Data_Document: {
            data: components["schemas"]["Tracks_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserCollectionAlbumsRelationshipAddOperation_Payload: {
            data: components["schemas"]["UserCollectionAlbumsRelationshipAddOperation_Payload_Data"][];
        };
        UserCollectionAlbumsRelationshipAddOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "albums";
        };
        UserCollectionAlbumsRelationshipRemoveOperation_Payload: {
            data: components["schemas"]["UserCollectionAlbumsRelationshipRemoveOperation_Payload_Data"][];
        };
        UserCollectionAlbumsRelationshipRemoveOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "albums";
        };
        UserCollectionArtistsRelationshipAddOperation_Payload: {
            data: components["schemas"]["UserCollectionArtistsRelationshipAddOperation_Payload_Data"][];
        };
        UserCollectionArtistsRelationshipAddOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "artists";
        };
        UserCollectionArtistsRelationshipRemoveOperation_Payload: {
            data: components["schemas"]["UserCollectionArtistsRelationshipRemoveOperation_Payload_Data"][];
        };
        UserCollectionArtistsRelationshipRemoveOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "artists";
        };
        UserCollectionPlaylistsRelationshipRemoveOperation_Payload: {
            data: components["schemas"]["UserCollectionPlaylistsRelationshipRemoveOperation_Payload_Data"][];
        };
        UserCollectionPlaylistsRelationshipRemoveOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "playlists";
        };
        UserCollectionTracksRelationshipAddOperation_Payload: {
            data: components["schemas"]["UserCollectionTracksRelationshipAddOperation_Payload_Data"][];
        };
        UserCollectionTracksRelationshipAddOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "tracks";
        };
        UserCollectionTracksRelationshipRemoveOperation_Payload: {
            data: components["schemas"]["UserCollectionTracksRelationshipRemoveOperation_Payload_Data"][];
        };
        UserCollectionTracksRelationshipRemoveOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "tracks";
        };
        UserCollectionVideosRelationshipAddOperation_Payload: {
            data: components["schemas"]["UserCollectionVideosRelationshipAddOperation_Payload_Data"][];
        };
        UserCollectionVideosRelationshipAddOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "albums" | "artistClaims" | "artistRoles" | "artists" | "artworks" | "playlists" | "providers" | "searchResults" | "searchSuggestions" | "tracks" | "trackStatistics" | "userCollections" | "userEntitlements" | "userRecommendations" | "userReports" | "users" | "videos";
        };
        UserCollectionVideosRelationshipRemoveOperation_Payload: {
            data: components["schemas"]["UserCollectionVideosRelationshipRemoveOperation_Payload_Data"][];
        };
        UserCollectionVideosRelationshipRemoveOperation_Payload_Data: {
            id: string;
            /** @enum {string} */
            type: "albums" | "artistClaims" | "artistRoles" | "artists" | "artworks" | "playlists" | "providers" | "searchResults" | "searchSuggestions" | "tracks" | "trackStatistics" | "userCollections" | "userEntitlements" | "userRecommendations" | "userReports" | "users" | "videos";
        };
        UserCollections_Albums_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["UserCollections_Albums_Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        UserCollections_Albums_Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            meta?: components["schemas"]["UserCollections_Albums_Resource_Identifier_Meta"];
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        UserCollections_Albums_Resource_Identifier_Meta: {
            /** Format: date-time */
            addedAt: string;
        };
        UserCollections_Artists_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["UserCollections_Artists_Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        UserCollections_Artists_Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            meta?: components["schemas"]["UserCollections_Artists_Resource_Identifier_Meta"];
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        UserCollections_Artists_Resource_Identifier_Meta: {
            /** Format: date-time */
            addedAt: string;
        };
        UserCollections_Attributes: Record<string, never>;
        UserCollections_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserCollections_Multi_Resource_Data_Document: {
            data: components["schemas"]["UserCollections_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserCollections_Playlists_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["UserCollections_Playlists_Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        UserCollections_Playlists_Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            meta?: components["schemas"]["UserCollections_Playlists_Resource_Identifier_Meta"];
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        UserCollections_Playlists_Resource_Identifier_Meta: {
            /** Format: date-time */
            addedAt: string;
        };
        UserCollections_Relationships: {
            albums: components["schemas"]["UserCollections_Albums_Multi_Relationship_Data_Document"];
            artists: components["schemas"]["UserCollections_Artists_Multi_Relationship_Data_Document"];
            owners: components["schemas"]["Multi_Relationship_Data_Document"];
            playlists: components["schemas"]["UserCollections_Playlists_Multi_Relationship_Data_Document"];
            tracks: components["schemas"]["UserCollections_Tracks_Multi_Relationship_Data_Document"];
            videos: components["schemas"]["UserCollections_Videos_Multi_Relationship_Data_Document"];
        };
        UserCollections_Resource_Object: {
            attributes?: components["schemas"]["UserCollections_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["UserCollections_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "userCollections";
        };
        UserCollections_Single_Resource_Data_Document: {
            data: components["schemas"]["UserCollections_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserCollections_Tracks_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["UserCollections_Tracks_Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        UserCollections_Tracks_Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            meta?: components["schemas"]["UserCollections_Tracks_Resource_Identifier_Meta"];
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        UserCollections_Tracks_Resource_Identifier_Meta: {
            /** Format: date-time */
            addedAt: string;
        };
        UserCollections_Videos_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["UserCollections_Videos_Resource_Identifier"][];
            links: components["schemas"]["Links"];
        };
        UserCollections_Videos_Resource_Identifier: {
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            meta?: components["schemas"]["UserCollections_Videos_Resource_Identifier_Meta"];
            /**
             * @description Resource type
             * @example tracks
             */
            type: string;
        };
        UserCollections_Videos_Resource_Identifier_Meta: {
            /** Format: date-time */
            addedAt: string;
        };
        UserEntitlements_Attributes: {
            /** @description entitlements for user */
            entitlements: ("MUSIC" | "DJ")[];
        };
        UserEntitlements_Multi_Resource_Data_Document: {
            data: components["schemas"]["UserEntitlements_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserEntitlements_Resource_Object: {
            attributes?: components["schemas"]["UserEntitlements_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "userEntitlements";
        };
        UserEntitlements_Single_Resource_Data_Document: {
            data: components["schemas"]["UserEntitlements_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserRecommendations_Attributes: Record<string, never>;
        UserRecommendations_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserRecommendations_Multi_Resource_Data_Document: {
            data: components["schemas"]["UserRecommendations_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserRecommendations_Relationships: {
            discoveryMixes: components["schemas"]["Multi_Relationship_Data_Document"];
            myMixes: components["schemas"]["Multi_Relationship_Data_Document"];
            newArrivalMixes: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        UserRecommendations_Resource_Object: {
            attributes?: components["schemas"]["UserRecommendations_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["UserRecommendations_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "userRecommendations";
        };
        UserRecommendations_Single_Resource_Data_Document: {
            data: components["schemas"]["UserRecommendations_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserReportCreateOperation_Payload: {
            data: components["schemas"]["UserReportCreateOperation_Payload_Data"];
        };
        UserReportCreateOperation_Payload_Data: {
            attributes: components["schemas"]["UserReportCreateOperation_Payload_Data_Attributes"];
            relationships: components["schemas"]["UserReportsCreateOperation_Payload_Data_Relationships"];
            /** @enum {string} */
            type: "userReports";
        };
        UserReportCreateOperation_Payload_Data_Attributes: {
            description: string;
            /** @enum {string} */
            reason: "SEXUAL_CONTENT_OR_NUDITY" | "VIOLENT_OR_DANGEROUS_CONTENT" | "HATEFUL_OR_ABUSIVE_CONTENT" | "HARASSMENT" | "PRIVACY_VIOLATION" | "SCAMS_OR_FRAUD" | "SPAM" | "COPYRIGHT_INFRINGEMENT" | "UNKNOWN";
        };
        UserReportsCreateOperation_Payload_Data_Relationships: {
            reportedResources: components["schemas"]["UserReportsCreateOperation_Payload_Data_Relationships_ReportedResources"];
        };
        UserReportsCreateOperation_Payload_Data_Relationships_ReportedResources: {
            data: components["schemas"]["UserReportsCreateOperation_Payload_Data_Relationships_ReportedResources_Data"][];
        };
        UserReportsCreateOperation_Payload_Data_Relationships_ReportedResources_Data: {
            id: string;
            /** @enum {string} */
            type: "tracks" | "artists" | "playlists";
        };
        UserReports_Attributes: {
            /** @description Description */
            description: string;
            /**
             * @description Reason
             * @enum {string}
             */
            reason: "SEXUAL_CONTENT_OR_NUDITY" | "VIOLENT_OR_DANGEROUS_CONTENT" | "HATEFUL_OR_ABUSIVE_CONTENT" | "HARASSMENT" | "PRIVACY_VIOLATION" | "SCAMS_OR_FRAUD" | "SPAM" | "COPYRIGHT_INFRINGEMENT" | "UNKNOWN";
        };
        UserReports_Multi_Resource_Data_Document: {
            data: components["schemas"]["UserReports_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        UserReports_Resource_Object: {
            attributes?: components["schemas"]["UserReports_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "userReports";
        };
        UserReports_Single_Resource_Data_Document: {
            data: components["schemas"]["UserReports_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Users_Attributes: {
            /**
             * @description ISO 3166-1 alpha-2 country code
             * @example US
             */
            country: string;
            /**
             * @description email address
             * @example test@test.com
             */
            email?: string;
            /**
             * @description Is the email verified
             * @example true
             */
            emailVerified?: boolean;
            /**
             * @description Users first name
             * @example John
             */
            firstName?: string;
            /**
             * @description Users last name
             * @example Rambo
             */
            lastName?: string;
            /**
             * @description Users nostr public key
             * @example e3fc3965800f9c729b483a2a7291f30e569fbf5ab91a6eef332f9e28a5e923dd
             */
            nostrPublicKey?: string;
            /**
             * @description user name
             * @example username
             */
            username: string;
        };
        Users_Multi_Resource_Data_Document: {
            data: components["schemas"]["Users_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Users_Resource_Object: {
            attributes?: components["schemas"]["Users_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "users";
        };
        Users_Single_Resource_Data_Document: {
            data: components["schemas"]["Users_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Videos_Attributes: {
            /** @description Available usage for this video */
            availability?: ("STREAM" | "DJ" | "STEM")[];
            /**
             * @description Copyright
             * @example (p)(c) 2017 S. CARTER ENTERPRISES, LLC. MARKETED BY ROC NATION & DISTRIBUTED BY ROC NATION/UMG RECORDINGS INC.
             */
            copyright?: string;
            /**
             * @description Duration (ISO 8601)
             * @example PT2M58S
             */
            duration: string;
            /**
             * @description Explicit content
             * @example false
             */
            explicit: boolean;
            /** @description Video links external to TIDAL API */
            externalLinks?: components["schemas"]["External_Link"][];
            /**
             * @description International Standard Recording Code (ISRC)
             * @example TIDAL2274
             */
            isrc: string;
            /**
             * Format: double
             * @description Popularity (0.0 - 1.0)
             * @example 0.56
             */
            popularity: number;
            /**
             * Format: date
             * @description Release date (ISO-8601)
             * @example 2017-06-27
             */
            releaseDate?: string;
            /**
             * @description Video title
             * @example Kill Jay Z
             */
            title: string;
            /**
             * @description Video version, complements title
             * @example original, mix etc
             */
            version?: string;
        };
        Videos_Multi_Relationship_Data_Document: {
            data?: components["schemas"]["Resource_Identifier"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Videos_Multi_Resource_Data_Document: {
            data: components["schemas"]["Videos_Resource_Object"][];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
        Videos_Relationships: {
            albums: components["schemas"]["Multi_Relationship_Data_Document"];
            artists: components["schemas"]["Multi_Relationship_Data_Document"];
            providers: components["schemas"]["Multi_Relationship_Data_Document"];
            thumbnailArt: components["schemas"]["Multi_Relationship_Data_Document"];
        };
        Videos_Resource_Object: {
            attributes?: components["schemas"]["Videos_Attributes"];
            /**
             * @description Resource id
             * @example 12345
             */
            id: string;
            relationships?: components["schemas"]["Videos_Relationships"];
            /**
             * @description Resource type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "videos";
        };
        Videos_Single_Resource_Data_Document: {
            data: components["schemas"]["Videos_Resource_Object"];
            included?: components["schemas"]["Included"];
            links: components["schemas"]["Links"];
        };
    };
    responses: {
        /** @description Bad request - The request could not be understood by the server due to malformed syntax or invalid parameters */
        Bad_Request_Response: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {"errors":[{"code":"GENERIC_REQUEST_ERROR","detail":"The request contains validation errors"}]} */
                "application/vnd.api+json": components["schemas"]["Errors_Document"];
            };
        };
        /** @description Internal server error - The server encountered an unexpected condition that prevented it from fulfilling the request */
        Internal_Server_Error_Response: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {"errors":[{"code":"INTERNAL_SERVER_ERROR","detail":"The service encountered an error"}]} */
                "application/vnd.api+json": components["schemas"]["Errors_Document"];
            };
        };
        /** @description Method not allowed - The request method is not allowed for the requested resource */
        Method_Not_Allowed_Response: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {"errors":[{"code":"METHOD_NOT_ALLOWED","detail":"The resource doesnt support the requested HTTP method: POST"}]} */
                "application/vnd.api+json": components["schemas"]["Errors_Document"];
            };
        };
        /** @description Not acceptable - The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request */
        Not_Acceptable_Response: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {"errors":[{"code":"NOT_ACCEPTABLE","detail":"Not acceptable response media type on client. Supported media types on server: application/vnd.api+json, application/json"}]} */
                "application/vnd.api+json": components["schemas"]["Errors_Document"];
            };
        };
        /** @description Not found - The requested resource could not be found */
        Not_Found_Response: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {"errors":[{"code":"NOT_FOUND","detail":"The requested resource could not be found"}]} */
                "application/vnd.api+json": components["schemas"]["Errors_Document"];
            };
        };
        /** @description Too many requests - The user has sent too many requests in a given amount of time */
        Too_Many_Requests_Response: {
            headers: {
                /** @description Time to wait before making a new request, in seconds. */
                "Retry-After"?: number;
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Unsupported media type - The request entity has a media type which the server or resource does not support */
        Unsupported_Media_Type_Response: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {"errors":[{"code":"UNSUPPORTED_MEDIA_TYPE","detail":"Unsupported request media type: application/xml. Expected media type format: application/vnd.api+json"}]} */
                "application/vnd.api+json": components["schemas"]["Errors_Document"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
