/* eslint-disable */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/searchresults/{query}": {
    /**
     * Search for music metadata by a query
     * @description Search for music: albums, artists, tracks, etc.
     */
    get: operations["getSearchResults"];
  };
  "/searchresults/{query}/relationships/videos": {
    /**
     * Relationship: videos
     * @description Search for videos by a query.
     */
    get: operations["searchForVideos"];
  };
  "/searchresults/{query}/relationships/tracks": {
    /**
     * Relationship: tracks
     * @description Search for tracks by a query.
     */
    get: operations["searchForTracks"];
  };
  "/searchresults/{query}/relationships/topHits": {
    /**
     * Relationship: topHits
     * @description Search for top hits by a query: artists, albums, tracks, videos.
     */
    get: operations["searchForTopHits"];
  };
  "/searchresults/{query}/relationships/artists": {
    /**
     * Relationship: artists
     * @description Search for artists by a query.
     */
    get: operations["searchForArtists"];
  };
  "/searchresults/{query}/relationships/albums": {
    /**
     * Relationship: albums
     * @description Search for albums by a query.
     */
    get: operations["searchForAlbums"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error_Document: {
      /** @description array of error objects */
      errors?: components["schemas"]["Error_Object"][];
      links?: components["schemas"]["Links"];
    };
    Error_Object: {
      /** @description unique identifier for this particular occurrence of the problem */
      id?: string;
      /** @description HTTP status code applicable to this problem */
      status?: string;
      /** @description application-specific error code */
      code?: string;
      /** @description human-readable explanation specific to this occurrence of the problem */
      detail?: string;
      source?: components["schemas"]["Error_Object_Source"];
    };
    /** @description object containing references to the primary source of the error */
    Error_Object_Source: {
      /**
       * @description a JSON Pointer [RFC6901] to the value in the request document that caused the error
       * @example /data/attributes/title
       */
      pointer?: string;
      /**
       * @description string indicating which URI query parameter caused the error.
       * @example countryCode
       */
      parameter?: string;
      /**
       * @description string indicating the name of a single request header which caused the error
       * @example X-some-custom-header
       */
      header?: string;
    };
    /** @description links object */
    Links: {
      /**
       * @description the link that generated the current response document
       * @example /artists/xyz/relationships/tracks
       */
      self: string;
      /**
       * @description the next page of data (pagination)
       * @example /artists/xyz/relationships/tracks?page[cursor]=zyx
       */
      next?: string;
    };
    Album_Attributes: {
      /**
       * @description Original title
       * @example 4:44
       */
      title: string;
      /**
       * @description Barcode id (EAN-13 or UPC-A)
       * @example 00854242007552
       */
      barcodeId: string;
      /**
       * Format: int32
       * @description Number of volumes
       * @example 1
       */
      numberOfVolumes: number;
      /**
       * Format: int32
       * @description Number of album items
       * @example 13
       */
      numberOfItems: number;
      /**
       * @description Duration (ISO-8601)
       * @example P41M5S
       */
      duration: string;
      /**
       * @description Indicates whether an album consist of any explicit content
       * @example true
       */
      explicit: boolean;
      /**
       * Format: date
       * @description Release date (ISO-8601)
       * @example 2017-06-30
       */
      releaseDate?: string;
      /**
       * @description Copyright information
       * @example (p)(c) 2017 S. CARTER ENTERPRISES, LLC. MARKETED BY ROC NATION & DISTRIBUTED BY ROC NATION/UMG RECORDINGS INC.
       */
      copyright?: string;
      /**
       * Format: double
       * @description Album popularity (ranged in 0.00 ... 1.00). Conditionally visible
       * @example 0.56
       */
      popularity: number;
      /** @description Defines an album availability e.g. for streaming, DJs, stems */
      availability?: ("STREAM" | "DJ" | "STEM")[];
      mediaTags: string[];
      /** @description Represents available links to, and metadata about, an album cover images */
      imageLinks?: components["schemas"]["Image_Link"][];
      /** @description Represents available links to, and metadata about, an album cover videos */
      videoLinks?: components["schemas"]["Video_Link"][];
      /** @description Represents available links to something that is related to an album resource, but external to the TIDAL API */
      externalLinks?: components["schemas"]["External_Link"][];
    };
    Artist_Attributes: {
      /**
       * @description Artist name
       * @example JAY Z
       */
      name: string;
      /**
       * Format: double
       * @description Artist popularity (ranged in 0.00 ... 1.00). Conditionally visible
       * @example 0.56
       */
      popularity: number;
      /** @description Represents available links to, and metadata about, an artist images */
      imageLinks?: components["schemas"]["Image_Link"][];
      /** @description Represents available links to something that is related to an artist resource, but external to the TIDAL API */
      externalLinks?: components["schemas"]["External_Link"][];
    };
    External_Link: {
      /**
       * @description link to something that is related to a resource
       * @example https://tidal.com/browse/artist/1566
       */
      href: string;
      meta: components["schemas"]["External_Link_Meta"];
    };
    /** @description metadata about an external link */
    External_Link_Meta: {
      /**
       * @description external link type
       * @example TIDAL_SHARING
       * @enum {string}
       */
      type: "TIDAL_SHARING" | "TIDAL_AUTOPLAY_ANDROID" | "TIDAL_AUTOPLAY_IOS" | "TIDAL_AUTOPLAY_WEB" | "TWITTER" | "FACEBOOK" | "INSTAGRAM" | "TIKTOK" | "SNAPCHAT" | "HOMEPAGE";
    };
    Image_Link: {
      /**
       * @description link to an image
       * @example https://resources.tidal.com/images/717dfdae/beb0/4aea/a553/a70064c30386/80x80.jpg
       */
      href: string;
      meta: components["schemas"]["Image_Link_Meta"];
    };
    /** @description metadata about an image */
    Image_Link_Meta: {
      /**
       * Format: int32
       * @description image width (in pixels)
       * @example 80
       */
      width: number;
      /**
       * Format: int32
       * @description image height (in pixels)
       * @example 80
       */
      height: number;
    };
    /** @description relationships object describing relationships between the resource and other resources */
    Relationship: {
      /** @description resource linkage */
      data?: components["schemas"]["Resource_Identifier"][];
      links?: components["schemas"]["Links"];
    };
    Resource_Identifier: {
      /**
       * @description resource unique identifier
       * @example 12345
       */
      id: string;
      /**
       * @description resource unique type
       * @example tracks
       */
      type: string;
    };
    /** @description attributes object representing some of the resource's data */
    Search_Result_Relationship: components["schemas"]["Album_Attributes"] | components["schemas"]["Track_Attributes"] | components["schemas"]["Video_Attributes"] | components["schemas"]["Artist_Attributes"];
    /** @description attributes object representing some of the resource's data */
    Search_Results_Attributes: {
      /**
       * @description search request unique tracking number
       * @example 5896e37d-e847-4ca6-9629-ef8001719f7f
       */
      trackingId: string;
      /**
       * @description 'did you mean' prompt
       * @example beatles
       */
      didYouMean?: string;
    };
    Search_Results_Data_Document: {
      data: components["schemas"]["Search_Results_Resource"];
      links?: components["schemas"]["Links"];
      /** @description array of resource objects that are related to the primary data and/or each other */
      included?: components["schemas"]["Search_Results_Relationship_Resource"][];
    };
    /** @description array of resource objects that are related to the primary data and/or each other */
    Search_Results_Relationship_Resource: {
      attributes?: components["schemas"]["Search_Result_Relationship"];
      /** @description relationships object describing relationships between the resource and other resources */
      relationships?: {
        [key: string]: components["schemas"]["Relationship"];
      };
      links?: components["schemas"]["Links"];
      /**
       * @description resource unique identifier
       * @example 12345
       */
      id: string;
      /**
       * @description resource unique type
       * @example tracks
       */
      type: string;
    };
    /** @description document's primary data */
    Search_Results_Resource: {
      attributes?: components["schemas"]["Search_Results_Attributes"];
      relationships?: components["schemas"]["Available_Searchresult_Relationships"];
      links?: components["schemas"]["Links"];
      /**
       * @description resource unique identifier
       * @example 12345
       */
      id: string;
      /**
       * @description resource unique type
       * @example tracks
       */
      type: string;
    };
    Track_Attributes: {
      /**
       * @description Album item's title
       * @example Kill Jay Z
       */
      title: string;
      /**
       * @description Version of the album's item; complements title
       * @example Kill Jay Z
       */
      version?: string;
      /**
       * @description ISRC code
       * @example TIDAL2274
       */
      isrc: string;
      /**
       * @description Duration expressed in accordance with ISO 8601
       * @example P30M5S
       */
      duration: string;
      /**
       * @description Copyright information
       * @example (p)(c) 2017 S. CARTER ENTERPRISES, LLC. MARKETED BY ROC NATION & DISTRIBUTED BY ROC NATION/UMG RECORDINGS INC.
       */
      copyright?: string;
      /**
       * @description Indicates whether a catalog item consist of any explicit content
       * @example false
       */
      explicit: boolean;
      /**
       * Format: double
       * @description Track or video popularity (ranged in 0.00 ... 1.00). Conditionally visible
       * @example 0.56
       */
      popularity: number;
      /** @description Defines a catalog item availability e.g. for streaming, DJs, stems */
      availability?: ("STREAM" | "DJ" | "STEM")[];
      mediaTags: string[];
      /** @description Represents available links to something that is related to a catalog item, but external to the TIDAL API */
      externalLinks?: components["schemas"]["External_Link"][];
    };
    Video_Attributes: {
      /**
       * @description Album item's title
       * @example Kill Jay Z
       */
      title: string;
      /**
       * @description Version of the album's item; complements title
       * @example Kill Jay Z
       */
      version?: string;
      /**
       * @description ISRC code
       * @example TIDAL2274
       */
      isrc: string;
      /**
       * @description Duration expressed in accordance with ISO 8601
       * @example P30M5S
       */
      duration: string;
      /**
       * @description Copyright information
       * @example (p)(c) 2017 S. CARTER ENTERPRISES, LLC. MARKETED BY ROC NATION & DISTRIBUTED BY ROC NATION/UMG RECORDINGS INC.
       */
      copyright?: string;
      /**
       * Format: date
       * @description Release date (ISO-8601)
       * @example 2017-06-27
       */
      releaseDate?: string;
      /**
       * @description Indicates whether a catalog item consist of any explicit content
       * @example false
       */
      explicit: boolean;
      /**
       * Format: double
       * @description Track or video popularity (ranged in 0.00 ... 1.00). Conditionally visible
       * @example 0.56
       */
      popularity: number;
      /** @description Defines a catalog item availability e.g. for streaming, DJs, stems */
      availability?: ("STREAM" | "DJ" | "STEM")[];
      /** @description Represents available links to, and metadata about, an album item images */
      imageLinks?: components["schemas"]["Image_Link"][];
      /** @description Represents available links to something that is related to a catalog item, but external to the TIDAL API */
      externalLinks?: components["schemas"]["External_Link"][];
    };
    Video_Link: {
      /**
       * @description link to a video
       * @example https://resources.tidal.com/images/717dfdae/beb0/4aea/a553/a70064c30386/80x80.mp4
       */
      href: string;
      meta: components["schemas"]["Video_Link_Meta"];
    };
    /** @description metadata about a video */
    Video_Link_Meta: {
      /**
       * Format: int32
       * @description video width (in pixels)
       * @example 80
       */
      width: number;
      /**
       * Format: int32
       * @description video height (in pixels)
       * @example 80
       */
      height: number;
    };
    Search_Results_Relationships_Document: {
      /** @description document's primary data, consist of resource linkage objects */
      data: components["schemas"]["Resource_Identifier"][];
      links?: components["schemas"]["Links"];
      /** @description array of resource objects that are related to the primary data and/or each other */
      included?: components["schemas"]["Search_Results_Relationship_Resource"][];
    };
    /** @description Available searchresult relationships */
    Available_Searchresult_Relationships: {
      albums?: components["schemas"]["Resource_Relationships"];
      artists?: components["schemas"]["Resource_Relationships"];
      videos?: components["schemas"]["Resource_Relationships"];
      topHits?: components["schemas"]["Resource_Relationships"];
      tracks?: components["schemas"]["Resource_Relationships"];
    };
    Resource_Relationships: {
      /** @description resource linkage */
      data?: components["schemas"]["Resource_Identifier"][];
      links?: components["schemas"]["Links"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Search for music metadata by a query
   * @description Search for music: albums, artists, tracks, etc.
   */
  getSearchResults: {
    parameters: {
      query: {
        /**
         * @description ISO 3166-1 alpha-2 country code
         * @example US
         */
        countryCode: string;
        /**
         * @description Allows the client to customize which related resources should be returned. Available options: artists, albums, tracks, videos, topHits
         * @example artists
         */
        include?: string[];
      };
      path: {
        /**
         * @description Search query
         * @example moon
         */
        query: string;
      };
    };
    responses: {
      /** @description Successfully executed request. */
      200: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Search_Results_Data_Document"];
        };
      };
      /** @description Bad request on client party. Ensure the proper HTTP request is sent (query parameters, request body, etc.). */
      400: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Resource not found. The requested resource is not found. */
      404: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Method not supported. Ensure a proper HTTP method for an HTTP request is used. */
      405: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Not acceptable. The server doesn't support any of the requested by client acceptable content types. */
      406: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Unsupported Media Type. The API is using content negotiation. Ensure the proper media type is set into Content-Type header. */
      415: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Internal Server Error. Something went wrong on the server party. */
      500: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
    };
  };
  /**
   * Relationship: videos
   * @description Search for videos by a query.
   */
  searchForVideos: {
    parameters: {
      query: {
        /**
         * @description ISO 3166-1 alpha-2 country code
         * @example US
         */
        countryCode: string;
        /**
         * @description Allows the client to customize which related resources should be returned. Available options: videos
         * @example videos
         */
        include?: string[];
      };
      path: {
        /**
         * @description Search query
         * @example moon
         */
        query: string;
      };
    };
    responses: {
      /** @description Successfully executed request. */
      200: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Search_Results_Relationships_Document"];
        };
      };
      /** @description Bad request on client party. Ensure the proper HTTP request is sent (query parameters, request body, etc.). */
      400: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Resource not found. The requested resource is not found. */
      404: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Method not supported. Ensure a proper HTTP method for an HTTP request is used. */
      405: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Not acceptable. The server doesn't support any of the requested by client acceptable content types. */
      406: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Unsupported Media Type. The API is using content negotiation. Ensure the proper media type is set into Content-Type header. */
      415: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Internal Server Error. Something went wrong on the server party. */
      500: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
    };
  };
  /**
   * Relationship: tracks
   * @description Search for tracks by a query.
   */
  searchForTracks: {
    parameters: {
      query: {
        /**
         * @description ISO 3166-1 alpha-2 country code
         * @example US
         */
        countryCode: string;
        /**
         * @description Allows the client to customize which related resources should be returned. Available options: tracks
         * @example tracks
         */
        include?: string[];
      };
      path: {
        /**
         * @description Search query
         * @example moon
         */
        query: string;
      };
    };
    responses: {
      /** @description Successfully executed request. */
      200: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Search_Results_Relationships_Document"];
        };
      };
      /** @description Bad request on client party. Ensure the proper HTTP request is sent (query parameters, request body, etc.). */
      400: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Resource not found. The requested resource is not found. */
      404: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Method not supported. Ensure a proper HTTP method for an HTTP request is used. */
      405: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Not acceptable. The server doesn't support any of the requested by client acceptable content types. */
      406: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Unsupported Media Type. The API is using content negotiation. Ensure the proper media type is set into Content-Type header. */
      415: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Internal Server Error. Something went wrong on the server party. */
      500: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
    };
  };
  /**
   * Relationship: topHits
   * @description Search for top hits by a query: artists, albums, tracks, videos.
   */
  searchForTopHits: {
    parameters: {
      query: {
        /**
         * @description ISO 3166-1 alpha-2 country code
         * @example US
         */
        countryCode: string;
        /**
         * @description Allows the client to customize which related resources should be returned. Available options: topHits
         * @example topHits
         */
        include?: string[];
      };
      path: {
        /**
         * @description Search query
         * @example moon
         */
        query: string;
      };
    };
    responses: {
      /** @description Successfully executed request. */
      200: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Search_Results_Relationships_Document"];
        };
      };
      /** @description Bad request on client party. Ensure the proper HTTP request is sent (query parameters, request body, etc.). */
      400: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Resource not found. The requested resource is not found. */
      404: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Method not supported. Ensure a proper HTTP method for an HTTP request is used. */
      405: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Not acceptable. The server doesn't support any of the requested by client acceptable content types. */
      406: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Unsupported Media Type. The API is using content negotiation. Ensure the proper media type is set into Content-Type header. */
      415: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Internal Server Error. Something went wrong on the server party. */
      500: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
    };
  };
  /**
   * Relationship: artists
   * @description Search for artists by a query.
   */
  searchForArtists: {
    parameters: {
      query: {
        /**
         * @description ISO 3166-1 alpha-2 country code
         * @example US
         */
        countryCode: string;
        /**
         * @description Allows the client to customize which related resources should be returned. Available options: artists
         * @example artists
         */
        include?: string[];
      };
      path: {
        /**
         * @description Search query
         * @example moon
         */
        query: string;
      };
    };
    responses: {
      /** @description Successfully executed request. */
      200: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Search_Results_Relationships_Document"];
        };
      };
      /** @description Bad request on client party. Ensure the proper HTTP request is sent (query parameters, request body, etc.). */
      400: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Resource not found. The requested resource is not found. */
      404: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Method not supported. Ensure a proper HTTP method for an HTTP request is used. */
      405: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Not acceptable. The server doesn't support any of the requested by client acceptable content types. */
      406: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Unsupported Media Type. The API is using content negotiation. Ensure the proper media type is set into Content-Type header. */
      415: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Internal Server Error. Something went wrong on the server party. */
      500: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
    };
  };
  /**
   * Relationship: albums
   * @description Search for albums by a query.
   */
  searchForAlbums: {
    parameters: {
      query: {
        /**
         * @description ISO 3166-1 alpha-2 country code
         * @example US
         */
        countryCode: string;
        /**
         * @description Allows the client to customize which related resources should be returned. Available options: albums
         * @example albums
         */
        include?: string[];
      };
      path: {
        /**
         * @description Search query
         * @example moon
         */
        query: string;
      };
    };
    responses: {
      /** @description Successfully executed request. */
      200: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Search_Results_Relationships_Document"];
        };
      };
      /** @description Bad request on client party. Ensure the proper HTTP request is sent (query parameters, request body, etc.). */
      400: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Resource not found. The requested resource is not found. */
      404: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Method not supported. Ensure a proper HTTP method for an HTTP request is used. */
      405: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Not acceptable. The server doesn't support any of the requested by client acceptable content types. */
      406: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Unsupported Media Type. The API is using content negotiation. Ensure the proper media type is set into Content-Type header. */
      415: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
      /** @description Internal Server Error. Something went wrong on the server party. */
      500: {
        headers: {
          /**
           * @description Number of tokens currently remaining. Refer to X-RateLimit-Replenish-Rate header for replenishment information.
           * @example 5
           */
          "X-RateLimit-Remaining": number;
          /**
           * @description Initial number of tokens, and max number of tokens that can be replenished.
           * @example 20
           */
          "X-RateLimit-Burst-Capacity": number;
          /**
           * @description Number of tokens replenished per second.
           * @example 5
           */
          "X-RateLimit-Replenish-Rate": number;
          /**
           * @description Request cost in tokens.
           * @example 5
           */
          "X-RateLimit-Requested-Tokens": number;
        };
        content: {
          "application/vnd.api+json": components["schemas"]["Error_Document"];
        };
      };
    };
  };
}
