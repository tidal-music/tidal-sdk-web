import shaka from 'shaka-player';

export function manipulateLicenseResponse(response: shaka.extern.Response) {
  // This is the wrapped license, which is a JSON string.
  const wrappedString = shaka.util.StringUtils.fromUTF8(response.data);
  // Parse the JSON string into an object
  const wrapped = JSON.parse(wrappedString) as { payload: string };

  // 'payload' is a base64-encoded version of the raw license,
  // decode that base64 string into a Uint8Array.
  const rawLicense = shaka.util.Uint8ArrayUtils.fromBase64(wrapped.payload); // base64 string -> Uint8Array

  // Replace the 'response.data', feed raw license to the CDM.
  response.data = rawLicense;
}

export function manipulateLicenseRequest(
  request: shaka.extern.Request,
  options: {
    securityToken: string;
    streamingSessionId: string;
  },
) {
  if (
    request.body instanceof ArrayBuffer ||
    request.body instanceof Uint8Array
  ) {
    const { securityToken, streamingSessionId } = options;

    // This is the raw license request generated by the CDM
    const requestBody =
      request.body instanceof Uint8Array
        ? request.body
        : new Uint8Array(request.body);
    const requestBodyString = String.fromCharCode(...requestBody);
    const requestBodyBase64 = btoa(requestBodyString);

    // Create the wrapped request structure
    const wrapped = {
      payload: requestBodyBase64,
      // Add whatever else we want to communicate to the server
      securityToken,
      streamingSessionId,
    };

    // We use Json for the API
    request.headers['Content-Type'] = 'application/json';
    // @ts-expect-error String is assignable to body.
    request.body = JSON.stringify(wrapped);
  } else {
    console.error('Expected request body to be ArrayBuffer.');
  }
}
