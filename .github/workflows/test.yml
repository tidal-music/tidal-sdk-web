name: Test

on:
  workflow_call:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        branch:
          - ${{ github.head_ref }}
          - ${{ github.base_ref }}
    name: Run Unit Tests
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup

      # Determine changed and unchanged packages
      - name: Determine changed packages
        id: changed-packages
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Fetch the base branch
            git fetch origin ${{ github.base_ref }}
            BASE_REF="origin/${{ github.base_ref }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
          else
            BASE_REF="${{ github.event.before }}"
            HEAD_REF="${{ github.sha }}"
          fi
          echo "$BASE_REF - $HEAD_REF"
          CHANGED=$(git diff --name-only $BASE_REF...$HEAD_REF | grep '^packages/' | awk -F'/' '{print $2}' | sort | uniq | tr '\n' ' ')
          echo "Changed packages: $CHANGED"
          echo "{list}={$CHANGED}" >> $GITHUB_OUTPUT

      - name: Prepare test user for player tests
        if: contains(steps.changed-packages.outputs.list, 'player')
        id: json
        run: |
          echo ${{ env.TEST_USER }} | base64 -d > test-user.json
          json=$(cat test-user.json)
          replacement=${{ secrets.PLAYER_REFRESH_TOKEN }}
          fixed_json="$(echo ${json/\[TOKEN\]/$replacement})"
          encoded_json=$(echo "$fixed_json" | base64 | tr -d '\n')
          echo "encoded=\"$encoded_json\"" >> $GITHUB_OUTPUT
        env:
          TEST_USER: ${{ secrets.PLAYER_TEST_USER }}

      - name: Run Player Tests
        if: contains(steps.changed-packages.outputs.list, 'player')
        run: |
          pnpm --filter player run test || exit 1
        env:
          TEST_USER: ${{ steps.json.outputs.encoded }}

      # Test unchanged packages
      - name: Test unchanged packages
        run: |
          ALL_PKGS=$(ls packages | tr '\n' ' ')
          for PKG in $ALL_PKGS; do
            if [[ " ${{ env.CHANGED_PKGS }} " != *" $PKG "* ]] && [[ "$PKG" != "player" ]]; then
              echo "Testing unchanged package: $PKG"
              #pnpm --filter $PKG run test || exit 1
            fi
          done
        env:
          CHANGED_PKGS: ${{ steps.changed-packages.outputs.list }}

      # Test changed packages with coverage
      - name: Test changed packages with coverage
        run: |
          echo "Changed packages: ${{ env.CHANGED_PKGS }}"
          for PKG in ${{ env.CHANGED_PKGS }}; do
            if [[ "$PKG" != "player" ]]; then
              echo "Testing changed package with coverage: $PKG"
              #pnpm --filter $PKG run test:coverage || exit 1
            fi
          done
        env:
          CHANGED_PKGS: ${{ steps.changed-packages.outputs.list }}
